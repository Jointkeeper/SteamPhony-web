name: CI

on:
  push:
    branches: [main]
  pull_request:
    branches: [main]

jobs:
  backend:
    runs-on: ubuntu-latest
    services:
      postgres:
        image: postgres:15
        env:
          POSTGRES_USER: postgres
          POSTGRES_PASSWORD: password
          POSTGRES_DB: steamphony_dev
        ports:
          - 5432:5432
        options: >-
          --health-cmd="pg_isready -U postgres" --health-interval=10s --health-timeout=5s --health-retries=5
      redis:
        image: redis:7-alpine
        ports:
          - 6379:6379
    env:
      DATABASE_URL: postgresql://postgres:password@localhost:5432/steamphony_dev
      REDIS_HOST: localhost
      REDIS_PORT: 6379
      JWT_SECRET: ci_secret
      LOG_TO_FILE: "false"
    steps:
      - uses: actions/checkout@v4
      - uses: actions/setup-node@v4
        with:
          node-version: 20
          cache: 'npm'
      - name: Install backend dependencies
        run: npm ci
        working-directory: steamphony-api
      - name: Generate Prisma client
        run: npm run prisma:generate
        working-directory: steamphony-api
      - name: Apply migrations
        run: npx prisma migrate deploy
        working-directory: steamphony-api
      - name: Lint backend
        run: npm run lint
        working-directory: steamphony-api
      - name: Test backend
        run: npm test -- --runInBand
        working-directory: steamphony-api
      - name: Security audit
        run: npm audit --production --audit-level=high
        working-directory: steamphony-api

  frontend:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        node: [20]
    steps:
      - uses: actions/checkout@v4
      - uses: actions/setup-node@v4
        with:
          node-version: ${{ matrix.node }}
          cache: 'npm'
      - name: Install frontend dependencies
        run: npm ci
        working-directory: "Steam web"
      - name: Lint frontend
        run: npm run lint --if-present
        working-directory: "Steam web"
      - name: Test frontend
        run: npm test --if-present
        working-directory: "Steam web"

  docker-build:
    runs-on: ubuntu-latest
    needs: [backend, frontend]
    steps:
      - uses: actions/checkout@v4
      - name: Build docker-compose images
        run: docker-compose -f steamphony-api/docker-compose.yml build 